name: CI
on: [push, workflow_dispatch]
jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hours max
    steps:
    - name: Download playit.gg client
      run: |
        Write-Host "Downloading playit.gg client..."
        $success = $false
        
        # Method 1: Try GitHub releases first (more reliable)
        try {
          Write-Host "Method 1: GitHub releases..."
          # Get latest release info
          $apiUrl = "https://api.github.com/repos/playit-cloud/playit-agent/releases/latest"
          $headers = @{'User-Agent' = 'GitHub-Actions'; 'Accept' = 'application/vnd.github.v3+json'}
          $release = Invoke-RestMethod -Uri $apiUrl -Headers $headers
          
          # Find Windows executable
          $windowsAsset = $release.assets | Where-Object { 
            $_.name -match "playit.*\.exe$" -or 
            $_.name -match "windows.*\.exe$" -or 
            $_.name -eq "playit.exe"
          } | Select-Object -First 1
          
          if ($windowsAsset) {
            Write-Host "Found asset: $($windowsAsset.name) ($($windowsAsset.size) bytes)"
            Write-Host "Download URL: $($windowsAsset.browser_download_url)"
            
            Invoke-WebRequest -Uri $windowsAsset.browser_download_url -OutFile "playit.exe" -UseBasicParsing -Headers @{'Accept' = 'application/octet-stream'}
            
            if ((Get-Item "playit.exe" -ErrorAction SilentlyContinue)?.Length -gt 1000) {
              $success = $true
              Write-Host "GitHub download successful"
            }
          }
        } catch {
          Write-Host "GitHub method failed: $_"
        }
        
        # Method 2: Try official download URL
        if (-not $success) {
          try {
            Write-Host "Method 2: Official download URL..."
            Remove-Item "playit.exe" -ErrorAction SilentlyContinue
            Invoke-WebRequest -Uri "https://playit-cloud-client.releases.playit.gg/windows/playit.exe" -OutFile "playit.exe" -UseBasicParsing
            
            if ((Get-Item "playit.exe" -ErrorAction SilentlyContinue)?.Length -gt 1000) {
              $success = $true
              Write-Host "Official URL download successful"
            }
          } catch {
            Write-Host "Official URL method failed: $_"
          }
        }
        
        # Method 3: Try curl with specific version
        if (-not $success) {
          try {
            Write-Host "Method 3: Curl with specific version..."
            Remove-Item "playit.exe" -ErrorAction SilentlyContinue
            curl -L -H "Accept: application/octet-stream" -o playit.exe "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.25/playit-windows-x86_64.exe"
            
            if ((Get-Item "playit.exe" -ErrorAction SilentlyContinue)?.Length -gt 1000) {
              $success = $true
              Write-Host "Curl specific version download successful"
            }
          } catch {
            Write-Host "Curl method failed: $_"
          }
        }
        
        # Verify final download
        if (Test-Path "playit.exe") {
          $fileInfo = Get-Item "playit.exe"
          Write-Host "Final file size: $($fileInfo.Length) bytes"
          
          if ($fileInfo.Length -lt 1000) {
            Write-Host "ERROR: File too small"
            Get-Content "playit.exe" -Raw | Write-Host
            exit 1
          }
          
          # Check if it's actually an executable
          $bytes = [System.IO.File]::ReadAllBytes("playit.exe")
          if ($bytes.Length -gt 2 -and $bytes[0] -eq 0x4D -and $bytes[1] -eq 0x5A) {
            Write-Host "✓ Valid Windows PE executable detected"
          } else {
            Write-Host "ERROR: Not a valid Windows executable"
            Write-Host "First few bytes: $($bytes[0..10] -join ' ')"
            exit 1
          }
        } else {
          Write-Host "ERROR: No playit.exe found after all attempts"
          exit 1
        }
        
    - name: Create user TranAnhKhoa and configure
      run: |
        Write-Host "Creating user and configuring permissions..."
        # Create user
        net user TranAnhKhoa "AnhKhoa123@" /add
        
        # Add to required groups
        net localgroup "Remote Desktop Users" TranAnhKhoa /add
        net localgroup "Administrators" TranAnhKhoa /add
        
        # Verify user creation
        net user TranAnhKhoa
        Write-Host "User created successfully"
        
    - name: Enable Remote Desktop (RDP)
      run: |
        Write-Host "Configuring Remote Desktop..."
        
        # Enable RDP
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        
        # Configure firewall
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        
        # Set authentication
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        
        # Additional RDP optimizations
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "PortNumber" -Value 3389
        
        # Restart RDP service
        Restart-Service -Name "TermService" -Force
        
        Write-Host "RDP enabled and configured"
        
    - name: Login to playit.gg
      run: |
        Write-Host "Logging into playit.gg..."
        
        if (-not (Test-Path "playit.exe")) {
          Write-Host "ERROR: playit.exe not found!"
          exit 1
        }
        
        try {
          # Simple version test first
          Write-Host "Testing playit.exe..."
          $versionResult = Start-Process -FilePath ".\playit.exe" -ArgumentList "--version" -Wait -PassThru -NoNewWindow -RedirectStandardOutput "version.txt" -RedirectStandardError "version_err.txt"
          
          if (Test-Path "version.txt") {
            $version = Get-Content "version.txt" -Raw
            Write-Host "Playit version: $version"
          }
          
          if (Test-Path "version_err.txt") {
            $versionErr = Get-Content "version_err.txt" -Raw
            if ($versionErr) { Write-Host "Version stderr: $versionErr" }
          }
          
          # Login using file input method
          Write-Host "Creating secret file..."
          $Env:PLAYIT_SECRET | Out-File -FilePath "secret.txt" -Encoding ASCII -NoNewline
          
          Write-Host "Attempting login..."
          $loginResult = Start-Process -FilePath ".\playit.exe" -ArgumentList "login" -Wait -PassThru -NoNewWindow -RedirectStandardInput "secret.txt" -RedirectStandardOutput "login.txt" -RedirectStandardError "login_err.txt"
          
          # Check login results
          if (Test-Path "login.txt") {
            $loginOutput = Get-Content "login.txt" -Raw
            Write-Host "Login output: $loginOutput"
          }
          
          if (Test-Path "login_err.txt") {
            $loginError = Get-Content "login_err.txt" -Raw
            if ($loginError) { Write-Host "Login error: $loginError" }
          }
          
          if ($loginResult.ExitCode -eq 0) {
            Write-Host "✓ Login successful"
          } else {
            Write-Host "✗ Login failed with exit code: $($loginResult.ExitCode)"
            
            # Try alternative login method
            Write-Host "Trying alternative login method..."
            $alternativeLogin = Start-Process -FilePath ".\playit.exe" -ArgumentList "login", "--secret", $Env:PLAYIT_SECRET -Wait -PassThru -NoNewWindow -RedirectStandardOutput "alt_login.txt" -RedirectStandardError "alt_login_err.txt"
            
            if ($alternativeLogin.ExitCode -eq 0) {
              Write-Host "✓ Alternative login successful"
            } else {
              Write-Host "✗ All login methods failed"
              if (Test-Path "alt_login_err.txt") {
                Get-Content "alt_login_err.txt" | Write-Host
              }
              exit 1
            }
          }
          
          # Clean up temporary files
          Remove-Item "secret.txt", "version.txt", "version_err.txt", "login.txt", "login_err.txt", "alt_login.txt", "alt_login_err.txt" -ErrorAction SilentlyContinue
          
        } catch {
          Write-Host "Login process error: $_"
          exit 1
        }
      env:
        PLAYIT_SECRET: ${{ secrets.PLAYIT_SECRET }}
        
    - name: Start Tunnel (TCP 3389)
      run: |
        Write-Host "Starting playit tunnel for RDP (port 3389)..."
        
        # Display system info
        Write-Host "System Information:"
        Write-Host "Computer Name: $env:COMPUTERNAME"
        Write-Host "User: $env:USERNAME"
        Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.IPAddress -notlike "127.*"} | Select-Object IPAddress, InterfaceAlias
        
        # Start tunnel in background with logging
        try {
          Write-Host "Starting playit serve..."
          .\playit.exe serve 2>&1 | Tee-Object -FilePath "playit.log"
        } catch {
          Write-Host "Error starting tunnel: $_"
          if (Test-Path "playit.log") {
            Write-Host "Playit log contents:"
            Get-Content "playit.log"
          }
          exit 1
        }
        
    - name: Keep alive
      run: |
        Write-Host "Tunnel started. Keeping workflow alive..."
        Write-Host "RDP Connection Info:"
        Write-Host "Username: TranAnhKhoa"
        Write-Host "Password: AnhKhoa123@"
        Write-Host "Check playit.gg dashboard for tunnel URL"
        
        # Keep the workflow running
        while ($true) {
          Start-Sleep -Seconds 60
          Write-Host "$(Get-Date): Workflow still running..."
          
          # Check if playit process is still running
          if (-not (Get-Process -Name "playit" -ErrorAction SilentlyContinue)) {
            Write-Host "Playit process died, restarting..."
            .\playit.exe serve &
          }
        }
