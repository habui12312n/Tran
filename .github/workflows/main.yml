name: CI
on: [push, workflow_dispatch]
jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hours max
    steps:
    - name: Download playit.gg client
      run: |
        try {
          Write-Host "Downloading playit.gg client..."
          Invoke-WebRequest -Uri "https://playit-cloud-client.releases.playit.gg/windows/playit.exe" -OutFile "playit.exe" -UseBasicParsing
          
          # Verify download
          if (Test-Path "playit.exe") {
            $fileInfo = Get-Item "playit.exe"
            Write-Host "Downloaded file size: $($fileInfo.Length) bytes"
            if ($fileInfo.Length -lt 1000) {
              throw "Downloaded file too small, likely invalid"
            }
          } else {
            throw "playit.exe not found after download"
          }
        } catch {
          Write-Host "Download failed: $_"
          Write-Host "Trying alternative download..."
          # Fallback to GitHub releases
          curl -L -o playit.exe "https://github.com/playit-cloud/playit-agent/releases/latest/download/playit.exe"
        }
        
    - name: Create user TranAnhKhoa and configure
      run: |
        Write-Host "Creating user and configuring permissions..."
        # Create user
        net user TranAnhKhoa "AnhKhoa123@" /add
        
        # Add to required groups
        net localgroup "Remote Desktop Users" TranAnhKhoa /add
        net localgroup "Administrators" TranAnhKhoa /add
        
        # Verify user creation
        net user TranAnhKhoa
        Write-Host "User created successfully"
        
    - name: Enable Remote Desktop (RDP)
      run: |
        Write-Host "Configuring Remote Desktop..."
        
        # Enable RDP
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        
        # Configure firewall
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        
        # Set authentication
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        
        # Additional RDP optimizations
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "PortNumber" -Value 3389
        
        # Restart RDP service
        Restart-Service -Name "TermService" -Force
        
        Write-Host "RDP enabled and configured"
        
    - name: Login to playit.gg
      run: |
        Write-Host "Logging into playit.gg..."
        
        if (-not (Test-Path "playit.exe")) {
          Write-Host "ERROR: playit.exe not found!"
          exit 1
        }
        
        try {
          # Test playit.exe first
          Write-Host "Testing playit.exe..."
          $testOutput = & .\playit.exe --version 2>&1
          Write-Host "Playit version: $testOutput"
          
          # Create process for login (PowerShell input redirection workaround)
          $psi = New-Object System.Diagnostics.ProcessStartInfo
          $psi.FileName = ".\playit.exe"
          $psi.Arguments = "login"
          $psi.UseShellExecute = $false
          $psi.RedirectStandardInput = $true
          $psi.RedirectStandardOutput = $true
          $psi.RedirectStandardError = $true
          $psi.CreateNoWindow = $true
          
          $process = New-Object System.Diagnostics.Process
          $process.StartInfo = $psi
          $process.Start()
          
          # Send secret to stdin
          $process.StandardInput.WriteLine($Env:PLAYIT_SECRET)
          $process.StandardInput.Close()
          
          # Wait for completion with timeout
          if ($process.WaitForExit(30000)) {
            $output = $process.StandardOutput.ReadToEnd()
            $error = $process.StandardError.ReadToEnd()
            
            Write-Host "Login output: $output"
            if ($error) { Write-Host "Login error: $error" }
            
            if ($process.ExitCode -eq 0) {
              Write-Host "Login successful"
            } else {
              Write-Host "Login failed with exit code: $($process.ExitCode)"
              exit 1
            }
          } else {
            Write-Host "Login timeout"
            $process.Kill()
            exit 1
          }
        } catch {
          Write-Host "Login error: $_"
          # Fallback method
          Write-Host "Trying fallback login method..."
          echo $Env:PLAYIT_SECRET | .\playit.exe login
        }
      env:
        PLAYIT_SECRET: ${{ secrets.PLAYIT_SECRET }}
        
    - name: Start Tunnel (TCP 3389)
      run: |
        Write-Host "Starting playit tunnel for RDP (port 3389)..."
        
        # Display system info
        Write-Host "System Information:"
        Write-Host "Computer Name: $env:COMPUTERNAME"
        Write-Host "User: $env:USERNAME"
        Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.IPAddress -notlike "127.*"} | Select-Object IPAddress, InterfaceAlias
        
        # Start tunnel in background with logging
        try {
          Write-Host "Starting playit serve..."
          .\playit.exe serve 2>&1 | Tee-Object -FilePath "playit.log"
        } catch {
          Write-Host "Error starting tunnel: $_"
          if (Test-Path "playit.log") {
            Write-Host "Playit log contents:"
            Get-Content "playit.log"
          }
          exit 1
        }
        
    - name: Keep alive
      run: |
        Write-Host "Tunnel started. Keeping workflow alive..."
        Write-Host "RDP Connection Info:"
        Write-Host "Username: TranAnhKhoa"
        Write-Host "Password: AnhKhoa123@"
        Write-Host "Check playit.gg dashboard for tunnel URL"
        
        # Keep the workflow running
        while ($true) {
          Start-Sleep -Seconds 60
          Write-Host "$(Get-Date): Workflow still running..."
          
          # Check if playit process is still running
          if (-not (Get-Process -Name "playit" -ErrorAction SilentlyContinue)) {
            Write-Host "Playit process died, restarting..."
            .\playit.exe serve &
          }
        }
